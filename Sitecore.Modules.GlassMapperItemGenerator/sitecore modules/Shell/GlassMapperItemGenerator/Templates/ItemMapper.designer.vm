//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by GlassMapperItemGenerator Sitecore Module.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Sitecore.Data;
using Glass.Mapper.Sc.Configuration;
using Glass.Mapper.Sc.Configuration.Attributes;
using Glass.Mapper.Sc.Fields;
using ${SitecoreTemplate.BaseClassNamespace};

namespace ${SitecoreTemplate.Namespace}
{
	/// <summary>
    /// ${SitecoreTemplate.ClassName}
	/// <para>${SitecoreTemplate.ShortDescription}</para>
    /// <para>Path: ${SitecoreTemplate.Path}</para>
    /// <para>ID: ${SitecoreTemplate.Id}</para>
    /// </summary>
    [SitecoreType(TemplateId = "${SitecoreTemplate.Id}", AutoMap = true)]
    public partial class ${SitecoreTemplate.ClassName} : GlassBase, ${SitecoreTemplate.InterfaceName}
    {
        public const string TemplateIdString = "${SitecoreTemplate.Id}";
        public static readonly ID TemplateId = new ID(TemplateIdString);
        public const string TemplateName = "${SitecoreTemplate.Name}";

        public static class Fields
        {
			#foreach($field in ${SitecoreTemplate.Fields})

			#if($field.ReturnType != "")

			public static class ${field.PropertyName}Field
            {
                public static readonly ID Id = new ID("$field.Id");
                public const string Name = "$field.Name";
            }

			#end

			#end

        }

		#foreach($field in ${SitecoreTemplate.Fields})

		#if($field.FieldType == "")
		//Could not find Field Type for $field.FieldName
		#elseif($field.ShouldInferType)

		/// <summary>
        /// The $field.Name field.
		/// <para>$field.ShortDescription</para>
        /// <para>Field Type: $field.Type</para>
        /// <para>Field ID: $field.Id</para>
        /// </summary>
		[SitecoreField("${field.Name}", Setting = SitecoreFieldSettings.InferType)]
        public virtual $field.ReturnType $field.PropertyName { get; private set; }

		#else

		/// <summary>
        /// The $field.Name field.
		/// <para>$field.ShortDescription</para>
        /// <para>Field Type: $field.Type</para>
        /// <para>Field ID: $field.Id</para>
        /// </summary>
		[SitecoreField("${field.Name}")]
        public virtual $field.ReturnType $field.PropertyName { get; private set; }

		#end

		#end

    }
}